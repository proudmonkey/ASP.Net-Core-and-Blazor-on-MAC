@page "/bands"
@using Microsoft.AspNetCore.Blazor;
@using Microsoft.JSInterop;
@using System.Threading.Tasks;
@inject HttpClient Http

<h1>All-time Favorite Bands</h1>
<div>
    <div class="row">
        <div class="col-sm-1">
            <p>Name:</p>
        </div>
        <div class="col-sm-4">
            <input id="txtBandName" placeholder="Band Name" bind="@_bandName" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-1">
            <p>Genre:</p>
        </div>
        <div class="col-sm-4">
            <input id="txtBandGenre" placeholder="Band Genre" bind="@_bandGenre" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-1">
            <button class="btn btn-info" id="btnAdd" onclick=@(async () => await Add())>Add</button>
        </div>
    </div>
    <br />
</div>
@if (bands == null)
{
    <p><em>Loading your favorite bands of all time...</em></p>
}
else
{
    @if (bands.Count > 0)
    {
        <table class='table table-striped table-bordered table-hover table-condensed' style="width:80%;">
            <thead>
                <tr>
                    <th style="width: 40%">Band Name</th>
                    <th style="width: 20%">Band Genre</th>
                    <th style="width: 20%">Edit</th>
                    <th style="width: 20%">Delete</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var band in bands)
                {
                    <tr>
                        <td>
                            <span id="spnName_@band.Id">@band.Name</span>
                            <input id="txtName_@band.Id" bind="@_bandNameUpdate" style="display:none;"></input>
                        </td>
                        <td>
                            <span id="spnGenre_@band.Id">@band.Genre</span>
                            <input id="txtGenre_@band.Id" bind="@_bandGenreUpdate" style="display:none;"></input>
                        </td>
                        <td>
                            <button id="btnEdit_@band.Id" class="btn btn-primary" onclick=@(async() => await Edit(band.Id, band.Name, band.Genre))>Edit</button>
                            <button id="btnUpdate_@band.Id" style="display:none;" class="btn btn-success" onclick=@(async () => await Update(band.Id))>Update</button>
                            <button id="btnCancel_@band.Id" style="display:none;" class="btn btn-primary" onclick=@(async () => await Cancel(band.Id))>Cancel</button>
                        </td>
                        <td><button class="btn btn-danger" onclick=@(async () => await Delete(band.Id))>Delete</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@functions {

    public class BandDTO
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Genre { get; set; }
    }

    string _bandAPIUri = "http://localhost:5555/api/bands";
    string _bandName;
    string _bandGenre;
    string _bandNameUpdate;
    string _bandGenreUpdate;

    IList<BandDTO> bands = new List<BandDTO>();

    protected override async Task OnInitAsync()
    {
        await RefreshView();
    }

    private async Task RefreshView()
    {
        bands = await Http.GetJsonAsync<BandDTO[]>(_bandAPIUri);
        StateHasChanged();
    }

    public async Task Add()
    {
        if (!string.IsNullOrEmpty(_bandName))
        {
            await Http.SendJsonAsync(HttpMethod.Post, _bandAPIUri, new BandDTO
            {
                Name = _bandName,
                Genre = _bandGenre
            });

            _bandName = string.Empty;
            _bandGenre = string.Empty;

            await RefreshView();
        }
    }

    public async Task Update(int id)
    {
        if (!string.IsNullOrEmpty(_bandNameUpdate))
        {
            await Http.SendJsonAsync(HttpMethod.Put, _bandAPIUri, new BandDTO
            {
                Id = id,
                Name = _bandNameUpdate,
                Genre = _bandGenreUpdate
            });

            await RefreshView();
            await JSRuntime.Current.InvokeAsync<bool>("toggleUIView", new object[] { id.ToString(), "", "", false });

        }
    }

    public async Task Delete(int id)
    {
        await Http.DeleteAsync($"{_bandAPIUri}/{id}");
        await RefreshView();
    }

    public async Task Edit(int id, string bandName, string bandGenre)
    {
        await JSRuntime.Current.InvokeAsync<bool>("blazorAppJS.toggleUIView", new object[] { id.ToString(), bandName, bandGenre, true });
    }

    public async Task Cancel(int id)
    {
        await JSRuntime.Current.InvokeAsync<bool>("blazorAppJS.toggleUIView", new object[] { id.ToString(), "", "", false });
    }

}
